             CONSTRUCTOR TESTS

first vector initialized with no values
capacity = 0
size = 0
vector contains : 

second vector initialized with 10 values
capacity = 10
size = 10
vector contains : 10 10 10 10 10 10 10 10 10 10 

third vector initialized by copying vector2
capacity = 10
size = 10
vector contains : 10 10 10 10 10 10 10 10 10 10 

fourth vector initialized by range(7)
capacity = 7
size = 7
vector contains : 10 10 10 10 10 10 10 

                ITERATOR TESTS

we push 100 values in our vector 
capacity = 128
size = 100

begin = -2
end = 0
rbegin = 245
rend = 0

we insert 9999 as begin value 
new begin = 9999
we print in reverse mode with reverse iterators

245, 243, 240, 238, 235, 233, 230, 228, 225, 223, 220, 218, 215, 213, 210, 208, 205, 203, 200, 198, 195, 193, 190, 188, 185, 183, 180, 178, 175, 173, 170, 168, 165, 163, 160, 158, 155, 153, 150, 148, 145, 143, 140, 138, 135, 133, 130, 128, 125, 123, 120, 118, 115, 113, 110, 108, 105, 103, 100, 98, 95, 93, 90, 88, 85, 83, 80, 78, 75, 73, 70, 68, 65, 63, 60, 58, 55, 53, 50, 48, 45, 43, 40, 38, 35, 33, 30, 28, 25, 23, 20, 18, 15, 13, 10, 8, 5, 3, 0, -2, 9999, 

         COMPARISION ITERATORS

9999 == -2 ? no
9999 != -2 ? yes
9999 >= -2 ? yes
9999 > -2 ? yes
9999 <= -2 ? no
9999 < -2 ? no
                      AT TESTS

vector contains : 0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 81 84 87 90 93 96 99 102 105 108 111 114 117 120 123 126 129 132 135 138 141 144 147 150 153 156 159 162 165 168 171 174 177 180 183 186 189 192 195 198 201 204 207 210 213 216 219 222 225 228 231 234 237 240 243 246 249 252 255 258 261 264 267 270 273 276 279 282 285 288 291 294 297 
vec.at(1) = 3
vec.at(99) = 297

              OPERATOR[] TESTS

vector contains : 0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 81 84 87 90 93 96 99 102 105 108 111 114 117 120 123 126 129 132 135 138 141 144 147 150 153 156 159 162 165 168 171 174 177 180 183 186 189 192 195 198 201 204 207 210 213 216 219 222 225 228 231 234 237 240 243 246 249 252 255 258 261 264 267 270 273 276 279 282 285 288 291 294 297 
vec[0] = 0
vec[2] = 6
vec[99] = 297

                   FRONT TESTS

vector contains : 0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 81 84 87 90 93 96 99 102 105 108 111 114 117 120 123 126 129 132 135 138 141 144 147 150 153 156 159 162 165 168 171 174 177 180 183 186 189 192 195 198 201 204 207 210 213 216 219 222 225 228 231 234 237 240 243 246 249 252 255 258 261 264 267 270 273 276 279 282 285 288 291 294 297 
vec.front() = 0
we insert new front value(99) 
vector contains : 99 0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 81 84 87 90 93 96 99 102 105 108 111 114 117 120 123 126 129 132 135 138 141 144 147 150 153 156 159 162 165 168 171 174 177 180 183 186 189 192 195 198 201 204 207 210 213 216 219 222 225 228 231 234 237 240 243 246 249 252 255 258 261 264 267 270 273 276 279 282 285 288 291 294 297 
new vec.front() = 99

                    BACK TESTS

vector contains : 0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 81 84 87 90 93 96 99 102 105 108 111 114 117 120 123 126 129 132 135 138 141 144 147 150 153 156 159 162 165 168 171 174 177 180 183 186 189 192 195 198 201 204 207 210 213 216 219 222 225 228 231 234 237 240 243 246 249 252 255 258 261 264 267 270 273 276 279 282 285 288 291 294 297 
vec.back() = 297
we insert new back value(99) 
vector contains : 0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 81 84 87 90 93 96 99 102 105 108 111 114 117 120 123 126 129 132 135 138 141 144 147 150 153 156 159 162 165 168 171 174 177 180 183 186 189 192 195 198 201 204 207 210 213 216 219 222 225 228 231 234 237 240 243 246 249 252 255 258 261 264 267 270 273 276 279 282 285 288 291 294 297 99 
new vec.back() = 99

                CAPACITY TESTS

capacity = 1
size = 1
capacity = 2
size = 2
capacity = 4
size = 3
capacity = 4
size = 4
capacity = 8
size = 5
capacity = 8
size = 6
capacity = 8
size = 7
capacity = 8
size = 8
capacity = 16
size = 9
capacity = 16
size = 10
capacity = 16
size = 11
capacity = 16
size = 12
capacity = 16
size = 13
capacity = 16
size = 14
capacity = 16
size = 15
capacity = 16
size = 16
capacity = 32
size = 17
capacity = 32
size = 18
capacity = 32
size = 19
capacity = 32
size = 20
we insert 100 values
capacity = 120
size = 120

                   CLEAR TESTS

vector contains : 0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 
capacity = 32
size = 20

we clear vec
vector contains : 
capacity = 32
size = 0

                  INSERT TESTS

vector contains : 0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 
we insert one value (10 at begin)

vector contains : 10 0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 

we insert 100 values at end

vector contains : 10 0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 

we insert a range at position 20

vector contains : 10 0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 57 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 

                   ERASE TESTS

vector contains : 0 4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 

we erase last value

vector contains : 0 4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 

we erase 10 first value
vector contains : 40 44 48 52 56 60 64 68 72 

we erase second value
vector contains : 40 48 52 56 60 64 68 72 

                PUSHBACK TESTS

we push back 20 values
vector contains : 0 
vector contains : 0 3 
vector contains : 0 3 6 
vector contains : 0 3 6 9 
vector contains : 0 3 6 9 12 
vector contains : 0 3 6 9 12 15 
vector contains : 0 3 6 9 12 15 18 
vector contains : 0 3 6 9 12 15 18 21 
vector contains : 0 3 6 9 12 15 18 21 24 
vector contains : 0 3 6 9 12 15 18 21 24 27 
vector contains : 0 3 6 9 12 15 18 21 24 27 30 
vector contains : 0 3 6 9 12 15 18 21 24 27 30 33 
vector contains : 0 3 6 9 12 15 18 21 24 27 30 33 36 
vector contains : 0 3 6 9 12 15 18 21 24 27 30 33 36 39 
vector contains : 0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 
vector contains : 0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 
vector contains : 0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 
vector contains : 0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 
vector contains : 0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 
vector contains : 0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 

                 POPBACK TESTS

we push back 20 values
vector contains : 0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 

we pop back 10 last values
vector contains : 0 3 6 9 12 15 18 21 24 27 

                  RESIZE TESTS

size = 0
we resize the vector to 20
size = 20
capacity = 20
we resize the vector to 1
size = 1
capacity = 20

                 RESERVE TESTS

             SWAP VALUES TESTS

vector contains : 0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 
vector contains : 2 3 6 11 18 27 38 51 66 83 102 123 146 171 198 227 258 291 326 363 

we swap vec with vec2
vector contains : 2 3 6 11 18 27 38 51 66 83 102 123 146 171 198 227 258 291 326 363 
vector contains : 0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 

  NON MEMBER SWAP VECTOR TESTS

vector contains : 2 5 8 11 14 17 20 23 26 29 32 35 38 41 44 47 50 53 56 59 
vector contains : 5 6 13 32 69 130 221 348 517 734 1005 1336 1733 2202 2749 3380 4101 4918 5837 6864 
we swap vec and vec2
vector contains : 5 6 13 32 69 130 221 348 517 734 1005 1336 1733 2202 2749 3380 4101 4918 5837 6864 
vector contains : 2 5 8 11 14 17 20 23 26 29 32 35 38 41 44 47 50 53 56 59 

             COMPARISION TESTS

vector contains : 2 5 8 11 14 17 20 23 26 29 32 35 38 41 44 47 50 53 56 59 
vector contains : 5 6 13 32 69 130 221 348 517 734 1005 1336 1733 2202 2749 3380 4101 4918 5837 6864 
vec == vec2? vector are not equal
we create a third vector, identical to second
vector contains : 5 6 13 32 69 130 221 348 517 734 1005 1336 1733 2202 2749 3380 4101 4918 5837 6864 
vec2 == vec3? vectors are equalwe modify third vector first value
vector contains : 4 6 13 32 69 130 221 348 517 734 1005 1336 1733 2202 2749 3380 4101 4918 5837 6864 

vec2 != vec3 ? vectors not equal
vec2 >= vec3 ? vec2 superior to vec3
vec2 > vec3 ? vec2 strictly superior to vec3
vec2 <= vec3 ? vec2 not inferior to vec3
vec2 < vec3 ? vec2 not strictly inferior to vec3
PERFORMANCE COMPARISION BETWEEN STD AND FT
 timer map -> 131.0000 ms
                     MAP TESTS

          MAP CONSTRUCTOR TEST

empty constructor
This map is empty ... :(
0 ~> a
1 ~> b
2 ~> c
3 ~> d
4 ~> e

copy constructor from first map
0 ~> a
1 ~> b
2 ~> c
3 ~> d
4 ~> e

range constructor from second map
0 ~> a
1 ~> b
2 ~> c
3 ~> d
4 ~> e

assignement constructor from second map
0 ~> a
1 ~> b
2 ~> c
3 ~> d
4 ~> e

            MAP ITERATORS TEST

0, A
1, B
2, C
3, D
4, E
5, F
6, G
7, H
8, I
9, J
10, K
11, L
12, M
13, N
14, O
15, P
16, Q
17, R
18, S
19, T
20, U
21, V
22, W
23, X
24, Y
25, Z
Begin = 0, A
end = 25, Z
rbegin = 25, Z
rend = 0, A

non const to const
const_begin = 0, A
const_end = 25, Z
const_rbegin = 25, Z
const_rend = 0, A
           MAP OPERATOR[] TEST

0 ~> A
1 ~> B
2 ~> C
3 ~> D
4 ~> E
5 ~> F
6 ~> G
7 ~> H
8 ~> I
9 ~> J
10 ~> K
11 ~> L
12 ~> M
13 ~> N
14 ~> O
15 ~> P
16 ~> Q
17 ~> R
18 ~> S
19 ~> T
20 ~> U
21 ~> V
22 ~> W
23 ~> X
24 ~> Y
25 ~> Z

we try to access and change value of mymap[1] (B)
0 ~> A
1 ~> &
2 ~> C
3 ~> D
4 ~> E
5 ~> F
6 ~> G
7 ~> H
8 ~> I
9 ~> J
10 ~> K
11 ~> L
12 ~> M
13 ~> N
14 ~> O
15 ~> P
16 ~> Q
17 ~> R
18 ~> S
19 ~> T
20 ~> U
21 ~> V
22 ~> W
23 ~> X
24 ~> Y
25 ~> Z

                 MAP SIZE TEST

we create an empty map
is map empty? 
yes
0 ~> A
1 ~> B
2 ~> C
3 ~> D
4 ~> E
5 ~> F
6 ~> G
7 ~> H
8 ~> I
9 ~> J
10 ~> K
11 ~> L
12 ~> M
13 ~> N
14 ~> O
15 ~> P
16 ~> Q
17 ~> R
18 ~> S
19 ~> T
20 ~> U
21 ~> V
22 ~> W
23 ~> X
24 ~> Y
25 ~> Z

is map empty? 
no
size = 26
we delete one value 
new size = 25

                MAP CLEAR TEST
0 ~> bonjour
1 ~> bonjour
2 ~> bonjour
3 ~> bonjour
4 ~> bonjour
5 ~> bonjour
6 ~> bonjour
7 ~> bonjour
8 ~> bonjour
9 ~> bonjour

before clear, size = 10
after clear, size = 0
               MAP INSERT TEST

1 ~> adrien
3 ~> marie
5 ~> pierre
7 ~> lea
9 ~> paul
11 ~> jacques
13 ~> arthur
15 ~> chloe
17 ~> tom
19 ~> julie

First insert method, single element added (robert)
1 ~> adrien
3 ~> marie
5 ~> pierre
7 ~> lea
9 ~> paul
10 ~> robert
11 ~> jacques
13 ~> arthur
15 ~> chloe
17 ~> tom
19 ~> julie

second insert method, range of elements, we copy our first map with a range of iterator
1 ~> adrien
3 ~> marie
5 ~> pierre
7 ~> lea
9 ~> paul
10 ~> robert
11 ~> jacques
13 ~> arthur
15 ~> chloe
17 ~> tom
19 ~> julie

third insert method, we insert one element at a given key(begin)
0 ~> joe
1 ~> adrien
3 ~> marie
5 ~> pierre
7 ~> lea
9 ~> paul
10 ~> robert
11 ~> jacques
13 ~> arthur
15 ~> chloe
17 ~> tom
19 ~> julie

                MAP ERASE TEST

1 ~> adrien
3 ~> marie
5 ~> pierre
7 ~> lea
9 ~> paul
11 ~> jacques
13 ~> arthur
15 ~> chloe
17 ~> tom
19 ~> julie

we erase the first value

3 ~> marie
5 ~> pierre
7 ~> lea
9 ~> paul
11 ~> jacques
13 ~> arthur
15 ~> chloe
17 ~> tom
19 ~> julie

we erase a range of values(11 - end)
3 ~> marie
5 ~> pierre
7 ~> lea
9 ~> paul

                 MAP SWAP TEST
first map contains :
1 ~> bonjour
3 ~> bonjour
5 ~> bonjour
7 ~> bonjour
9 ~> bonjour
11 ~> bonjour
13 ~> bonjour
15 ~> bonjour
17 ~> bonjour
19 ~> bonjour

second map contains :
0 ~> hello
1 ~> hello
2 ~> hello
3 ~> hello
4 ~> hello
5 ~> hello
6 ~> hello
7 ~> hello
8 ~> hello
9 ~> hello

we swap maps
first map contains :
0 ~> hello
1 ~> hello
2 ~> hello
3 ~> hello
4 ~> hello
5 ~> hello
6 ~> hello
7 ~> hello
8 ~> hello
9 ~> hello

we swap again with non member method
first map contains :
1 ~> bonjour
3 ~> bonjour
5 ~> bonjour
7 ~> bonjour
9 ~> bonjour
11 ~> bonjour
13 ~> bonjour
15 ~> bonjour
17 ~> bonjour
19 ~> bonjour

          MAP COMPARISION TEST

0 ~> a
1 ~> b
2 ~> c
3 ~> d
4 ~> e
5 ~> f
6 ~> g
7 ~> h
8 ~> i
9 ~> j

0 ~> a
1 ~> b
2 ~> c
3 ~> d
4 ~> e
5 ~> f
6 ~> g
7 ~> h
8 ~> i
9 ~> j

map1 = map2? maps are equal
we create a third map, different from first 2
0 ~> k
1 ~> l
2 ~> m
3 ~> n
4 ~> o
5 ~> p
6 ~> q
7 ~> r
8 ~> s
9 ~> t

map3 == map? no
map2 != map ? yes
map3 >= map ? yes
map3 > map ? yes
map3 <= map ? no
map3 < map ? no
PERFORMANCE COMPARISION BETWEEN STD AND FT
 timer map -> 7794.0000 ms
                     set TESTS

          set CONSTRUCTOR TEST

empty constructor
This set is empty ... :(
a
b
c
d
e

copy constructor from first set
a
b
c
d
e

range constructor from second set
a
b
c
d
e

assignement constructor from second set
a
b
c
d
e

            set ITERATORS TEST

A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
Begin = A, 
end = Z, 
rbegin = Z, 
rend = A, 

non const to const
const_begin = A
const_end = Z
const_rbegin = Z
const_rend = A
                 set SIZE TEST

we create an empty set
is set empty? 
yes
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z

is set empty? 
no
size = 26
we delete one value 
new size = 25

                set CLEAR TEST
bonjour

before clear, size = 1
after clear, size = 0
               set INSERT TEST

adrien
arthur
chloe
jacques
julie
lea
marie
paul
pierre
tom

First insert method, single element added (robert)
adrien
arthur
chloe
jacques
julie
lea
marie
paul
pierre
robert
tom

second insert method, range of elements, we copy our first set with a range of iterator
adrien
arthur
chloe
jacques
julie
lea
marie
paul
pierre
robert
tom

third insert method, we insert one element at a given key(begin)
adrien
arthur
chloe
jacques
joe
julie
lea
marie
paul
pierre
robert
tom

                set ERASE TEST

adrien
arthur
chloe
jacques
julie
lea
marie
paul
pierre
tom

we erase the first value

arthur
chloe
jacques
julie
lea
marie
paul
pierre
tom

we erase a range of values( paul - end)
arthur
chloe
jacques
julie
lea
marie

                 set SWAP TEST
first set contains :
bonjour

second set contains :
hello

we swap sets
first set contains :
hello

we swap again with non member method
first set contains :
bonjour

          set COMPARISION TEST

a
b
c
d
e
f
g
h
i
j

a
b
c
d
e
f
g
h
i
j

set1 = set2? sets are equal
we create a third set, different from first 2
k
l
m
n
o
p
q
r
s
t

set3 == set? no
set2 != set ? yes
set3 >= set ? yes
set3 > set ? yes
set3 <= set ? no
set3 < set ? no
PERFORMANCE COMPARISION BETWEEN STD AND FT
 timer set -> 7515.0000 ms
